#include "Algo.h"

//#define DEBUG
void debug_imshow(char * name, Mat img)
{
#ifdef DEBUG
    imshow(name, img);
    //waitKey(0);
#endif
}
/*
算法类构造函数，读取所有预储存的图片，求类条件概率category_condition_probability | Algo class constructor will read all the training data and get the Conditional probability
*/
Algo::Algo()
{
    char img_path[80];
    //0. 读取图像 | read the image 
    for (int category = 0; category < CATEGORY; category++)   //10类 | 10 category
    {
        vector <double> probability;
        //1. 创建保存读取出的特征 | create and save the feature
        vector<vector<int>> summary;
        //2. 获取某类别下的$SAMPLE张图片特征，并保存 | get the $SAMPLE samples' feature in one of the category
        for (int sample = 0; sample < SAMPLE; sample++)
        {
            sprintf(img_path, "./data/%d/%d-%d.bmp", category, category, sample + 1);
            Mat src = cv::imread(img_path);
            vector <int> feature = get_feature(src);
            summary.push_back(feature);
            qDebug() << img_path;
        }
        //3. 遍历summary后，计算特征向量每个位置为1时，属于该类的概率 | Traversing the summary and cal the clasification probability when location of this feature is 1
        for (int f_index = 0; f_index < FEATURE_DIM; f_index++)   //100维特征向量 | 100 dim feature vector 
        {
            int sum = 0;
            for (int sample = 0; sample < SAMPLE; sample++)   //每类$SAMPLE张图片 | $SAMPLE images under every category
            {
                sum += summary[sample][f_index];
            }
            probability.push_back(double(sum + 1) / float(SAMPLE + 2));
        }
        category_condition_probability.push_back(probability);
    }
}
vector<int> Algo::get_feature(Mat img)
{
    vector<int> feature;
    //0.0 对图像边界进行扩充 | expansion the img border
    Scalar value = Scalar(255, 255, 255);
    cv::copyMakeBorder(img, img, 400, 400, 400, 400, cv::BORDER_CONSTANT, value);
    //0. 转灰度图 | convert it to gray
    cv::cvtColor(img, img, cv::COLOR_RGB2GRAY);
    //1. 对图像二值化，确保是二值图像 | convert to bin img
    cv::threshold(img, img, 60, 255, cv::THRESH_BINARY);
    debug_imshow("bin", img);

    int min_col = img.cols;
    int max_col = 0;
    int max_row = 0;
    int min_row = img.rows;
    //2. 对图像最大外接长方形截取 | Intercept the external rect
    for (int col = 0; col < img.cols; col++)
    {
        for (int row = 0; row < img.rows; row++)
        {
            if (img.at<uchar>(row, col) < 250)
            {
                if (col < min_col)
                {
                    min_col = col;
                }
                if (col > max_col)
                {
                    max_col = col;
                }
                if (row < min_row)
                {
                    min_row = row;
                }
                if (row > max_row)
                {
                    max_row = row;
                }
            }
        }
    }
    qDebug(" max_col is %d", max_col);
    //3.1 求取最小区域中心坐标 | solve the center coor
    int middle_col = int((min_col + max_col) / 2);
    int middle_row = int((min_row + max_row) / 2);
    qDebug() << "max_col is" << max_col << "min_col is" << min_col << "max_row is" << max_row << "min_row is" << min_row << "img col is " << img.cols << "img row is " << img.rows;
    if ((max_col - min_col == 0) || (abs(max_col - min_col) == img.cols) || (max_row - min_row == 0) || (abs(max_row - min_row) == img.rows))
    {
        return feature;
    }
    //3.1.0
    //3.2 判断是列方向宽还是行方向宽 | which direction is wider? col or row
    if ((max_col - min_col) >= (max_row - min_row))  //列宽 | col width
    {
        //从中心点，向两边扩增行 | expand the rows from the center point
        min_row = middle_row - int((max_col - min_col) / 2);
        max_row = middle_row + int((max_col - min_col) / 2);
    }
    else //行宽 | row height
    {
        //从中心点，向两边扩增列 | expand the cols from the center point
        min_col = middle_col - int((max_row - min_row) / 2);
        max_col = middle_col + int((max_row - min_row) / 2);
    }

    Rect rect(min_col, min_row, max_col - min_col, max_row - min_row);
    Mat image_roi = img(rect);
    debug_imshow("roi", image_roi);
    //4. 对截取后的图像分成10*10的区域，如果每个小区域有黑点，即为1，否则为0 | divide the intercepted img to 10x10 region and set the location of feature to 1 if this exist the number pixel

    //4.1 resize成固定大小 | resize to a constant size
    cv::resize(image_roi, image_roi, cv::Size(40, 40));
    debug_imshow("roi40", image_roi);

    Mat feature_img(Size(10, 10), CV_8UC1);
    //4.2 遍历整幅图像，对每个小区域的进行判断是否存在像素 | Traversing the whole img
    for (int col = 0; col < 10; col++)
    {
        for (int row = 0; row < 10; row++)
        {
            int count = 0;
            for (int col_sub = 0; col_sub < 4; col_sub++)
            {
                for (int row_sub = 0; row_sub < 4; row_sub++)
                {
                    if (image_roi.at<uchar>(row * 4 + row_sub, col * 4 + col_sub) < 200)  //如果小方格内有为1的 | if exist black pixel
                    {
                        count++;
                    }
                }
            }
            if (count > 1)
            {
                feature.push_back(1);
                feature_img.at<uchar>(row, col) = 0;
            }
            else
            {
                feature.push_back(0);
                feature_img.at<uchar>(row, col) = 255;
            }
        }
    }
    resize(feature_img, feature_img, Size(100, 100));
    debug_imshow("feature", feature_img);
    //5. 返回100维的特征向量
    return feature;
}

/*
输入为特征向量 | input:feature vector
返回值为类别 | return:clasification score
*/
vector<double> Algo::min_error_bayes(vector<int> feature)
{
    //category_condition_probability
    vector<double> probability;
    //0. 遍历100维feature，计算每个元素对应于每一类的概率 | Traversing the feature, cal the probability under every categrory

    for (int sample = 0; sample < CATEGORY; sample++)
    {
        float plus = 1; //乘法初始化为1 | init the plus to 1
        for (int f_index = 0; f_index < FEATURE_DIM; f_index++)   //100维特征向量 | 100 dim feature vector
        {
            //1. 将每一类的概率相乘，得到整个feature属于每一类的概率 | multiple the probability of every dim of feature and then get the the probability under every categrory
            if (feature[f_index] == 1)
            {
                plus = plus * category_condition_probability[sample][f_index];
            }
            else
            {
                plus = plus * (1 - category_condition_probability[sample][f_index]);
            }
        }
        probability.push_back(plus);
    }
    //输出归一化 | normalize the output
    float sum = 0;
    for (int col = 0; col < CATEGORY; col++)
    {
        sum += probability[col];
    }
    for (int col = 0; col < CATEGORY; col++)
    {
        probability[col] = probability[col] / sum;
    }

    //2. 直接返回类别分数 | return clasification score
    return probability;
}

vector<float> Algo::fisher(vector<int> feature)
{
    qDebug() << "fisher debug";
    // 1. 直接投影向量W_stars [10 * 100]
    MatrixXd W_stars(10, 100);
    W_stars << 0.0, 2.28601805040129, 0.23873922643803525, -0.30780127767311605, 1.703600596240598, -1.481760822646489, 5.11585810286978, -7.482701614062471, 8.510506088937779e-13, -1.1853282096339568e-12, 4.0642287441501885, 0.44498767785042803, -2.9476337089769267, 0.12850354245976758, 0.4248899758876683, 1.8584216548866817, -1.4021963369322932, -0.503329729325344, 5.821625943028607, 5.821625943029325, -1.5502220418423573, -5.670527049516764, -2.1762054946075384, -0.0735775370429873, -1.2473152935987708, 2.7064242812269903, 1.6247451589928676, -1.1231483257567092, -16.714720074423738, 17.166681219136933, -5.614450785992156, 5.833612951888721, 7.03625189868511, -4.302828335473009, 0.16314923071815335, -2.366942803040706, 2.6256809607414797, 2.926759443107116, 10.470183237526854, -10.021064771813414, 2.8651322922568205e-13, -1.068312622144417, -2.672282065595952, 1.0199461439804693, -2.986419647957911, -2.514507982550455, -4.0504293678216765, 6.968565908204477, -7.291550876349696, 6.775493206096931, 0.1401013073129027, -5.696743942930384, -0.07565737698624375, 1.1761136989013243, -3.6134299668748833, -0.941876381190007, 1.0163744312820444, 5.427076247648703, 1.81421396553921, -2.6757329804302596, 0.14010130731283943, 1.3046997251011012, 1.7269586083975248, 0.5371274687055158, 4.65239540092109, 3.232325464988897, -1.5192516748836553, -1.942794425164415, -0.8124959031326782, 7.277246917544094, -8.555753277214059, -0.5016389762372349, -2.5803754089379263, 2.7851876584256057, -1.5193792765381278, -3.942106949336906, 6.837687079167932, -5.307960782135992, 0.0315661256507056, 2.894136210598968e-14, -8.555753277213926, -5.676800849321512, 13.703545085818845, -1.2508711150183034, 1.2877134798289678, -2.9186612399786562, -2.3560891680469886, 4.938248094021644, 0.0, 0.0, 0.0, -4.8992363893131055, 2.682282613181842, -6.401416123174005, -4.578169868800115, 3.4717549925165034, 1.5000656334091664, 5.261191693520015, 0.0, 0.0,
        0.0, 2.4938583552152345, -0.5938899962933122, 1.3036269362101978, -0.8891311611045896, 3.5145621332705144, -1.7574091479305665, 0.11833569904423413, 7.480328396757316e-13, -3.766464435533612e-13, -3.1283322135671985, -4.276713616636778, -0.6253614920775794, -2.2569878136320023, 0.7927969388762447, -1.0931745786273543, -0.7736373017191491, -1.4232616992213303, -8.386539498595731, -8.38653949859458, -6.827643495498796, 1.037485385574317, -1.8270432251333029, -0.6449534438779099, -2.1581154282502815, 1.1445372205555944, -1.7071568668296986, -1.3383905849300408, 3.9257556174224364, 12.186309295950828, -3.6993112819316307, 0.42574464483412044, 1.0637712862885138, -1.0301577859292794, -0.9556305952618512, -1.4304131364862496, -2.507782539790738, -0.13250262775306254, 7.954344916839694, -7.348841589693633, 2.5971116205846415e-14, -2.778554635738832, -2.0670499490623375, 0.5330165408917458, 0.8081780446245319, -2.9598051622439217, 0.25837708888086297, -1.2035899809391317, -0.928309230449937, -0.1899193487415065, -1.6999784174737322, 1.2595921299436683, -1.503036414764443, -1.0297715443095385, 0.4240774019219071, -1.3363549313334735, -3.1409457221311405, 0.6190498206178408, -2.90318661175592, 9.348981580230667, -1.6999784174740626, -1.9035578186056463, 1.581355670832206, -0.13311825647090814, -2.086886290993573, 2.041311612776303, -1.9065596425461955, -4.295975318792372, 1.3538221548946794, -11.111257795688129, -3.742543868324301, 0.44140853638655697, -1.6535705234998979, -2.832934368299033, -0.8107376414813907, -1.9347662176467555, 1.1428778859831734, 3.9563762120834927, -2.6670674910032286, 2.936769751131905e-14, -3.742543868324325, 2.377350074148273, -1.9900224835567428, 2.703142853756955, -1.9497916411021547, -0.6793222475494041, -0.6293774071722176, -1.4335616903295414, 0.0, 0.0, 0.0, -7.705863344178022, -1.7347341461205605, -1.2774482156225222, -2.6818890622796383, 0.1948235637849418, 1.2507202346552755, -0.5496126642461006, 0.0, 0.0,
        0.0, 2.7232513051003924, 5.496249814940581, -2.4173798014351675, 2.3423465371024506, -1.6430429356629832, -4.927435386320968, -1.1025354711060351, 1.1737808832375132e-12, -1.835821315440478e-12, -7.4923861495454105, 0.6324847151274139, 1.550159998162748, -0.9792229196372451, 0.2941833823674799, -2.773840084367174, 1.147273221558946, -0.29102545670276336, 4.079875854696109, 4.079875854700813, 1.0220349242522766, 6.390986227108651, 4.408341486826311, 1.9108487838294095, 0.48184170774397783, -3.567022937271315, -2.8181921864315105, 0.12453301084233992, 9.347544116935016, -17.77344640348907, 8.514421073793574, -9.897447373812188, -3.003161947186652, 2.239351922581748, -5.123074383993313, 4.764071652921149, 0.6880116647943892, -2.809990607252132, -23.4359230051619, 26.9227852336384, -5.493895058836437e-13, 8.143605017340768, -5.3533574801888655, -2.7516297419722457, 2.5753101269342196, -1.607969397822951, 0.9427914626255269, -1.2188787595928068, 0.9560869896267066, -0.31900981900944503, 3.936246352493632, 0.5235714579108688, 4.238051475101543, 1.4373442215818297, -0.2885095224605676, 2.493651136538636, 0.5328319762942186, -5.300978686148344, 9.569696597945633, -27.777054578458937, 3.936246352493611, -5.653866282480063, -0.17882958643655655, 1.0577679235151853, 2.381482286380069, 3.08577214275718, 5.431194607267971, 5.307162719165836, -6.587643168472326, 49.965918057835935, -2.609528028151466, 2.180708841675754, -3.1296811745076227, 0.7102514568585284, 0.7617376304189463, -2.52875773478267, 2.4191241130998167, -0.4673846183484116, -0.9297599256598019, 1.0004996356262625e-13, -2.609528028151621, -3.330217299189444, 3.4363668392179707, -4.2989348771944975, -0.009943194884810769, -3.784613289476279, 3.6452068311329473, 6.991880347010835, 0.0, 0.0, 0.0, -0.1325650982508435, 7.0343517001964, -0.7792710249095833, 3.0245899934457525, -3.8564057890952186, -7.301215654712042, -0.39340031897271066, 0.0, 0.0,
        0.0, 2.4019036640508387, 1.1939422657788963, -1.394311943813438, 1.0292884481218925, 0.11198865882655096, -1.1886240834881532, 0.5888301679540647, 1.5482505064996093e-12, 1.2344090520400805e-12, 2.6985917353404325, 4.109319221548568, 5.172498823157252, 7.127651237494455, -1.7978705709479124, -3.5090772558088257, -9.067470889265227, -4.177555909605241, 3.069128210195552, 3.0691282101965234, 9.049049686257504, -9.870784900623626, -4.229014694137958, -1.1989348561598439, 1.3271371867002741, -0.23609019881807636, 1.4439271869960915, -1.3863304267271612, -22.871617314980675, 15.626393219934329, 6.350457950915283, 7.866791276796574, -5.47614826475209, -1.9488921680599638, 3.365412671892574, -0.4639967024326102, 0.5653019373507274, 12.609192946667404, -2.8743798049306997, 9.807761720842002, 4.1259110961614556e-13, -2.8028135128849168, 3.061019738386414, 2.7116025405584767, 1.4377850356482755, 3.8467599145117384, 1.367889308451749, -4.590537126102555, 3.9241832153165657, -5.2630245853234, -1.4440654817411631, -0.8778840673569894, -4.181733716014842, -1.9529398466114936, -1.5293834004808038, 2.069034684539249, 4.713924361161647, 4.190990909066636, -3.5317924241748093, -13.965820069996997, -1.444065481741082, -0.02735268109688649, 1.1825368695978802, -0.661695120282507, -1.646151210904752, 0.9950572633696568, -5.513489677557546, 6.333590423576274, 19.44203242589136, -16.31231995002368, 2.681019702779536, 2.1930266282481012, -0.9507458448993642, 3.9425367854180857, -2.933400000877003, -1.7106829014616238, 5.758261386707031, -6.465067458568299, -24.142560156384928, -7.709501155076392e-14, 2.681019702779614, 1.246523057370335, 4.499660873260241, -1.7832708959464005, 0.6421750186681043, -0.36064058065168525, -1.2136237120128577, 1.8541155358989014, 0.0, 0.0, 0.0, -3.0548841526228783, 3.716931405852413, -2.99463431315648, -2.48785366467967, -0.9721731876445552, -0.693921677053571, 17.46787286936418, 0.0, 0.0,
        0.0, -8.323391158581938, 4.858322503473333, -0.8110967162097575, 1.1642330206439873, -6.87212705472113, 4.315805644491369, -11.57118387714349, -1.4615614117506898e-12, 1.7832414248676546e-13, 3.8705521111268846, 2.1502178787216577, -3.5318443576614356, 5.966750325136999, -7.440045178856005, 0.04636969474678487, 0.86764039928957, 2.6884343039111562, 4.2261001379301, 4.226100137930663, 4.420804483025085, -12.285096046493665, 2.1449180637250196, 0.5607370088248964, 3.022242766220515, -0.18423356411577263, -4.532060640361209, -2.579158414291677, 1.0708261394722367, -30.571797079893066, 0.5502523718973364, 5.64643359691339, -0.0008544979499571781, -1.0125953721436447, -2.2783443052454526, -0.8112260883266472, -4.000904691494095, -4.334053759618594, -9.963517039660234, 28.730261527260897, -1.7732500436133917e-13, -2.4789102948440833, 3.4880628289892543, -0.8805148457361667, -0.6302060323519421, 7.24875312940738, 6.2587894941453275, 3.3100625549881406, -0.07960100018918048, -13.576611477194207, -5.708927642470483, -2.869836587221159, 2.5712151871685713, 5.93935947073371, 5.138299819109699, 4.539989222060815, 0.767149213819967, 5.206171014101274, 1.1484208035813879, 10.66214045976738, -5.708927642470569, 12.739156177822556, 1.166711806337633, -2.9694201348447846, 4.934495091262411, -7.194371721945928, 1.6341678749285586, -1.332060164935903, -16.222127323663468, 9.410121716010426, 9.819953825120194, -7.334439496416237, 1.558091435913013, -9.983104091318003, 3.5016863751729583, 8.026264095985297, -1.4504480886416387, -9.909759752539355, 13.257588609148687, -4.489109161581222e-16, 9.819953825120276, -1.262892699198055, -6.302293966008551, 5.775318842855292, -8.699742511189612, 3.270090400274797, 2.628185760278205, 1.0866316576061372, 0.0, 0.0, 0.0, 20.033081183399247, -10.999806750692539, -5.326664437881528, 12.097088488368033, -8.497469408510497, 3.928369272712369, -9.916184303831875, 0.0, 0.0,
        0.0, -9.567098920925947, 0.7203167074041781, 6.710943276926132, -4.03320454307397, -4.558832454057969, -1.8776296904196403, -5.143586020367046, 4.545933643884991e-13, 3.755273174322213e-14, -1.689447491280215, -4.07461270028959, -0.97706657634185, -2.975177057534156, 0.5989288531618954, 0.5152404477964502, 1.6595053575664762, 6.001078878062183, -18.952404558268913, -18.95240455826763, -0.6504431623015474, 5.126770251086883, -1.2197792685937203, 5.757016929505436, -2.0014947400895995, 1.7447181634631677, 3.9298874148389693, -2.316494167040638, 16.17430837402062, 1.6639589815307776, 1.039004328979643, -3.146356089021694, -0.5012885021235898, -0.26365638088445564, 4.767663957275601, -2.2154495446774254, -2.676003257368687, -3.8387790858281, -0.19883685703477916, 5.204236367809761, -7.62263350409409e-14, 1.970834355335481, 3.3595882526129657, -1.6843617627266898, -1.2219563622421026, -0.27826706835054127, 1.6999136770462258, -2.434098334248116, -1.8072798286712288, -1.6072942787809126, 2.321714273628924, -4.4936270577170525, 0.18728717612111712, 0.018566871243721472, 0.6795649835119835, -1.7950527884303507, 2.23042430092619, -1.7966062390899733, 3.105283990150829, 3.2422008906723345, 2.3217142736291096, -1.379227482145625, -0.6374331177192207, 0.6359193848411766, 2.061300513530882, -2.6725489267551614, 2.6717704667905053, 0.6551523164461797, -1.8227518505830833, -6.929425041866203, 0.5584445832339737, 9.283242241094584, 4.0970793611779825, 0.23375985842485925, 1.6578060511196, 2.3514123602026467, -6.238393434680509, -0.16380423018820878, -13.22125001707432, 8.559374729838827e-14, 0.5584445832340688, -7.5854686479229745, 1.6411406499378849, 0.293750889505926, -0.5770408025122453, 2.1285429520029466, 0.9046766618733877, 4.689642961042234, 0.0, 0.0, 0.0, -0.9295350943202454, -1.6822452147319784, 2.556484970726558, -0.7504639226507654, 2.786247536130671, -1.9080498529290946, 4.221631180284234, 0.0, 0.0,
        0.0, 5.146218861228075, -0.2592537475599652, -2.798354952238944, -1.776387573545931, 2.144550926483188, 4.223930216819321, 7.180131865386061, 1.5994067561880143e-12, 1.1801601740356766e-12, -1.2147525318628607, -3.7794154672451947, -1.867442586765664, -4.097310583165764, -0.9019986383270608, 4.815097018562589, 0.22669346498076104, 0.4862883031841987, -8.203061707111841, -8.203061707110287, -5.706683223997489, 2.744819157061835, -2.9361312984728025, -2.1258962003488016, 0.026562028842436303, -2.1598822970324965, 0.5547237888837127, -4.012259703574935, 10.86899320856008, -3.8507299936441712, -4.491930692132726, 0.7686250507672174, 3.8877506673478477, 0.922016882571139, 2.2868334123828626, 0.07430773704952753, -0.9202366209595225, 5.00223062207827, 6.110740957330044, -13.537819519431643, -3.8314293638135187e-13, -2.977214789952701, 2.852030584988539, 1.8615562987491525, -0.6567190659052287, 0.7705120393118716, -1.7670078147036792, 0.7278897429823932, -3.0701297176398334, 10.202184935310253, -5.255558629184475, 8.523884757037825, 2.0684365634084285, -3.0591776348278907, 4.375289087047603, -1.2141604144770706, 1.3588993888924348, -4.971268093086943, -2.6716760470251284, 7.297013092724181, -5.255558629184833, -0.21624329007607157, 2.738332160828497, 3.802818533515827, -5.477150169085485, 0.4570644784622808, -1.244489545582475, 2.2398057875194604, 7.5907151443389305, -18.24536261865785, -3.509992070770129, -4.24240186075223, -2.1669606847971963, 2.800626943259326, -1.2923017483209267, -0.24611011668350358, -2.3780442111236466, 1.2230119103706176, -23.394970155683495, -5.474730316123398e-14, -3.5099920707700765, 5.425277049416266, -1.893893251882444, -0.7759536730061534, 0.19377466570733315, -2.087018999194781, 1.561983006534751, 3.024110961582331, 0.0, 0.0, 0.0, -8.079252337133266, 1.2413790192284928, 6.218355621851721, -1.4755329491029832, -2.6249274632714195, -4.103615626691321, -3.950953949282393, 0.0, 0.0,
        0.0, -6.828514425369326, -2.6245808965317523, -4.639762836230837, -0.9757907882931584, 1.6529251362715287, -1.115012930957865, 8.204055853339685, -3.591891738247433e-13, 2.7368017191235076e-13, -1.4224706626526, 2.9310536908844234, 2.803898334950891, 1.1206752550824493, -1.0611959360773215, -0.8809684775083073, 2.1559718363867524, -1.1560253212259954, 8.057828290668796, 8.057828290669478, 4.605335922703214, -2.9239031878482793, -2.4705375863339643, -1.133392637038841, 0.717616563871343, 0.24096097526860083, 0.24023752411397048, 3.8809127722381587, -12.166326552865016, 6.7939455483769144, 6.027806585355014, -4.01762571164464, -0.001566424420344159, 0.4416853425020628, -2.049228924174522, 0.3270708406469717, 1.6101212591503713, -1.1656414466693437, 2.5756944882459316, -9.145461127607287, -1.2148502516052966e-13, 6.316459347298424, 1.87315708290648, -2.717754971319537, -1.3993474706126556, 0.07305385112521917, -2.411852680250621, -3.319928109400502, 0.5572950804730343, 1.5887625753593255, -5.377450801473754, 0.5299529011003514, -0.9416850817512747, 0.2222437174217391, -1.6580304188159354, -1.3955472888294653, 0.8023266852744602, -2.4953128846158434, 0.27792679147927846, -4.772444586026966, -5.377450801473816, -1.4971203158449553, -1.822048789444751, -2.1992826700645627, -2.0387760575400664, 0.6732711403737253, -0.45651212738610525, -0.8829780946969779, 0.4417544639827895, 7.478932033092036, 1.8051528952700298, -2.967451621947296, 0.015442165756782478, -0.7012442653710065, 0.53456172817355, -1.3082216977378494, 0.20374239289109752, 0.2418227766313059, 8.995418263402406, -3.7114681869869905e-14, 1.8051528952700833, 2.7851216699063697, -2.746521295482851, -2.1067887463862123, 2.921270832885334, -1.297240737337852, -0.14402913596413391, -3.8601730770052938, 0.0, 0.0, 0.0, -0.26296586933594623, -2.1426762272444924, 2.5722368252134356, 2.229603380660345, 1.0743502663881999, -0.5977883972418019, -8.537228860214825, 0.0, 0.0,
        0.0, 1.1176540198248168, -1.8036957964456188, -0.15196019729852717, 0.43497339278509806, 2.44345035076073, -6.133030687412472, 3.611392232914035, 2.4637965602951407e-13, 1.2866473026876573e-12, 2.917188329503008, -0.3357684312724567, -2.663574707561399, 5.326084963743163, -1.6813468399975018, -0.5923214478228322, -0.8448309531955442, -0.2294404824841747, 13.8781353344317, 13.878135334432478, 0.8318941813980221, 2.1272791643372173, 2.6271790148682053, -2.967219781313019, 0.09750707364291755, 0.7671339548947236, 1.5983611893461354, 1.765153288382443, -4.281384962894819, -0.29998590240317746, -2.085294148105456, -2.4954553278979983, 2.2671300032210193, 0.7093856085984447, 3.099435331444101, -0.7416866991230497, 1.452338005909126, -1.0956082609978246, -13.242702984799708, 12.647147970425692, 7.441273389041133e-13, 0.03172291862999432, -4.491684138927715, 3.341671550710428, 1.3305779376143203, 1.2800840837508662, -1.64541986663197, -0.4962920755970811, 0.33566140078893714, -5.695557862479951, 2.119825499958618, 1.5941608321221938, 1.5317288877152389, 1.1267326487885745, -0.9694941441722436, -0.04032983148963573, -0.44241244738080754, 1.3421951649003419, 7.869426856267338, -16.487182962676975, 2.11982549995845, 1.3101973752153482, -2.841561842464336, 2.9497177092880333, 2.206737917395239, -1.992585104621226, -1.9243509080075034, 0.17320482354169275, -17.049345296638606, 17.97450311945269, 0.04971418145838813, 2.3153909379203528, 3.2994551178968283, 0.8781246791462705, -2.1220235800373266, 3.4136723996099025, -1.5351977142251707, 5.375488715731763, 27.628755842503786, 3.4308691231103905e-14, 0.04971418145907114, -4.0632266557081165, -3.0142243983868005, -0.3277051893248615, 1.6415944257112343, 0.19638505585989208, 2.997776842205454, -7.58732221109409, 0.0, 0.0, 0.0, -4.181631994633076, 3.92725287180272, 0.1273944554552351, 2.0542436348203115, 0.11237291990024278, 1.8293963266111728, -7.018843127803756, 0.0, 0.0,
        0.0, -0.8015024165224769, -1.9315551571586473, -0.9083919473210984, 1.380019481336748, 0.12622651344228242, 2.570893570589541, 5.357958033012909, -4.798450316398504e-13, 1.5184361137015868e-13, -7.782428395176822, 1.0449886082496027, 0.40232551370939706, 1.8752645698365358, 0.8759346324374628, 2.822038780219778, -0.9576844144109244, -0.9881605835930785, 7.165484290135106, 7.1654842901342395, -2.9014071789638907, 5.800070005557172, 5.756304403824422, 0.9239163295930909, 0.7895336551478579, -0.751805994943326, -1.1334178917778506, 4.038781026039499, 3.64776989115839, -4.896076032282254, 4.881021216213059, -0.2661621065055133, -1.418329226376334, 4.464225589592225, 1.7236661624473386, 2.1348719608840048, 2.2676767493166285, -1.3865055837047429, 0.870454970075782, -3.861128691177032, 1.5370208547288156e-13, -1.7255026247473062, 0.7531029981584517, 0.20885442095844672, -1.818861837869674, -3.4406586778736252, 3.2695336663179146, -1.9024293605555707, 0.4501482850192342, -4.805397199902891, -1.3025847099229373, 2.7341233533476483, -2.7897769615349044, -0.8296739108244746, 1.155778229049921, 1.4639312321499671, -1.8176783540158827, -4.270082376294388, -2.2903044475486607, 8.854441337911846, -1.3025847099229502, -5.109671110682635, 1.2549688968017074, -4.235066943924177, -1.0698459416258692, -4.444837354702679, 3.621956496958201, 0.3038500143920313, -9.022628998342242, 0.7543027661330441, 2.0396651588060406, -1.2893729236919844, -0.09651023652081436, -3.103679944961786, -0.5453071994271901, 3.411459548010508, -7.331343511026089, 6.50230606347744, 7.334294008397725, 1.7108835526277715e-14, 2.039665158806007, 2.137703464650692, -6.757607882498027, 1.6500705816613732, 0.6046752356840696, -2.6913290655131146, 0.9049203375796271, -4.466521083629888, 0.0, 0.0, 0.0, 3.4251347715670546, 5.237635981179724, -2.740591664309259, 0.7499431920065894, 4.358072405137218, -1.7698904621466838, -14.530291124643455, 0.0, 0.0;
    qDebug() << W_stars(0,1);
    Eigen::RowVectorXd W_star(100);
    // 2. 求出判别函数输出值W0s 
    MatrixXd W0s(1,10);
    W0s << 6.574971469413617, -10.939267708864211, 10.301798338779827, 11.964505049713319, 23.009728366174933, 12.432536385366195, 6.300188951209617, -4.053340804623424, 13.271439224771644, 8.833699213891673;
    qDebug() << W0s(0, 1);
    //cout << W0s;
    // 3. 输出值与每一类的阈值相比较,看一下哪一类输出值偏离阈值的百分比最大,则为该类
    Eigen::RowVectorXd feature_in(100);
    
    for (int i = 0; i < feature.size(); i++)
    {
        feature_in(i) = feature[i];
    }
    //cout << feature_in;
    // 3.1 点乘获取分数 vector<float> scores;
    vector<float> scores;
    QString tmp1;
    QString tmp2;
    for (int class_classifer = 0; class_classifer < 10; class_classifer++)
    {
        for (int i = 0; i < 100; i++)
        {
            W_star(i) = W_stars(class_classifer,i);
        }

        //for (int i = 0; i < 100; i++)
        //{
        //    tmp1+= QString::number(W_star(i));
        //    tmp2+= QString::number(feature_in(i));
        //}
        //qDebug() << tmp1;
        //qDebug() << tmp2;
        double ans=  W_star.dot(feature_in);
        //ans = W_star.adjoint()*feature_in;

        scores.push_back(ans);
    }
    
    // 3.2 获取大于每一类分类阈值的百分比
    vector<float> proportion;
    for (int class_classifer = 0; class_classifer < 10; class_classifer++)
    {
        proportion.push_back((scores[class_classifer] - W0s(0,class_classifer)) / W0s(0,class_classifer));
    }
    //// 3.3 判断哪一类高出的百分比最大
    //for (int class_classifer = 0; class_classifer < 10; class_classifer++)
    //{
    //    
    //}

    // 4. 返回
    return proportion;
}